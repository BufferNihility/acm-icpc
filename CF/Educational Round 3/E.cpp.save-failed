#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <map>
#include <set>
using namespace std;
#define LL long long
#define ONES(x) __builtin_popcount(x)
#define cmax(x, y) x = max(x, y)

const int N = 200100;
int fa[N];
LL f[N];
int n, m;

struct obj {
    int id;
    int a, b;
    LL c;
    bool flg;
    LL p;
}e[2 * N];

int cmp1(obj a, obj b) {
    return a.c < b.c;
}

int cmp2(obj a, obj b) {
    return a.id < b.id;
}

int find(int x){
    if(fa[x] == x) return x;
    fa[x] = find(fa[x]);
    return fa[x];
}

int Union(int x, int y) {
    fa[find(x)] = find(y);
    return fa[find(x)];
}

int main() {
    ios::sync_with_stdio(false);
    cin >> n >> m;
    for(int i = 0; i < m; i++) {
        e[i].id = i;
        cin >> e[i].a >> e[i].b >> e[i].c;
    }
    sort(e, e + m, cmp1);
    for(int i = 1; i <= n; i++) fa[i] = i;
    memset(f, 0, sizeof f);

    LL mst = 0;
    cout << endl;
    for(int i = 0; i < m; i++) {

        if(find(e[i].a) != find(e[i].b)) {
            mst += e[i].c;
            e[i].flg = false;
            int r1 = find(e[i].a), r2 = find(e[i].b);
            f[r1] = max(f[r1], f[r2]);
            f[r1] = max(f[r1], e[i].c);
            fa[r2] = r1;
        }
        else {
            e[i].flg = true;
            e[i].p = f[find(e[i].a)];
        }
    }
    cout << "MST " << mst << endl;
    sort(e, e + m, cmp2);
    for(int i = 0; i < m; i++) {
        if(e[i].flg) {
            cout << "EDG " << e[i].p << endl;
            printf("%I64d\n", mst - e[i].p + e[i].c);
        }
        else printf("%I64d\n", mst);
    }
    return 0;
}
